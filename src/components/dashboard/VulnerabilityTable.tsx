
import React, { useState } from 'react';
import { cn } from '@/lib/utils';
import BlurContainer from '../ui/BlurContainer';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { ChevronDown, ChevronUp, Filter, ArrowUpDown } from 'lucide-react';
import { Vulnerability, SeverityLevel } from './VulnerabilityCard';

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  className?: string;
  title?: string;
}

const severityColors: Record<SeverityLevel, string> = {
  critical: 'bg-severity-critical text-white',
  high: 'bg-severity-high text-white',
  medium: 'bg-severity-medium text-black',
  low: 'bg-severity-low text-black',
  info: 'bg-severity-info text-white',
};

const statusColors: Record<string, string> = {
  open: 'bg-destructive/10 text-destructive border-destructive/20',
  investigating: 'bg-severity-high/10 text-severity-high border-severity-high/20',
  fixed: 'bg-severity-low/10 text-severity-low border-severity-low/20',
  'false-positive': 'bg-muted text-muted-foreground border-muted-foreground/20',
};

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({
  vulnerabilities,
  className,
  title = "Vulnerabilities",
}) => {
  const [sorting, setSorting] = useState<{ column: keyof Vulnerability | null; direction: 'asc' | 'desc' }>({
    column: 'discoveredAt',
    direction: 'desc',
  });

  const getSortedVulnerabilities = () => {
    if (!sorting.column) return vulnerabilities;
    
    return [...vulnerabilities].sort((a, b) => {
      if (sorting.column === 'severity') {
        const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
        const valueA = severityOrder[a.severity as SeverityLevel];
        const valueB = severityOrder[b.severity as SeverityLevel];
        return sorting.direction === 'asc' ? valueA - valueB : valueB - valueA;
      }
      
      if (sorting.column === 'discoveredAt') {
        const dateA = new Date(a.discoveredAt).getTime();
        const dateB = new Date(b.discoveredAt).getTime();
        return sorting.direction === 'asc' ? dateA - dateB : dateB - dateA;
      }
      
      const valueA = String(a[sorting.column]);
      const valueB = String(b[sorting.column]);
      return sorting.direction === 'asc' 
        ? valueA.localeCompare(valueB) 
        : valueB.localeCompare(valueA);
    });
  };

  const handleSort = (column: keyof Vulnerability) => {
    setSorting(prev => ({
      column,
      direction: prev.column === column && prev.direction === 'asc' ? 'desc' : 'asc'
    }));
  };

  const getSortIcon = (column: keyof Vulnerability) => {
    if (sorting.column !== column) {
      return <ArrowUpDown className="ml-1 h-4 w-4 opacity-50" />;
    }
    return sorting.direction === 'asc' ? 
      <ChevronUp className="ml-1 h-4 w-4" /> : 
      <ChevronDown className="ml-1 h-4 w-4" />;
  };

  return (
    <BlurContainer className={cn("", className)}>
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-base font-medium">{title}</h3>
        <Button variant="outline" size="sm" className="text-xs gap-1 items-center">
          <Filter className="h-3 w-3 mr-1" />
          Filter
        </Button>
      </div>
      
      <div className="rounded-md border overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead onClick={() => handleSort('title')} className="cursor-pointer">
                <div className="flex items-center">
                  Title
                  {getSortIcon('title')}
                </div>
              </TableHead>
              <TableHead onClick={() => handleSort('severity')} className="cursor-pointer">
                <div className="flex items-center">
                  Severity
                  {getSortIcon('severity')}
                </div>
              </TableHead>
              <TableHead onClick={() => handleSort('status')} className="cursor-pointer">
                <div className="flex items-center">
                  Status
                  {getSortIcon('status')}
                </div>
              </TableHead>
              <TableHead onClick={() => handleSort('discoveredAt')} className="cursor-pointer">
                <div className="flex items-center">
                  Discovered
                  {getSortIcon('discoveredAt')}
                </div>
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {getSortedVulnerabilities().map((vuln) => (
              <TableRow key={vuln.id} className="hover:bg-secondary/40 transition-colors">
                <TableCell className="font-medium">{vuln.title}</TableCell>
                <TableCell>
                  <Badge variant="outline" className={cn("font-medium", severityColors[vuln.severity])}>
                    {vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}
                  </Badge>
                </TableCell>
                <TableCell>
                  <Badge variant="outline" className={cn("font-medium", statusColors[vuln.status])}>
                    {vuln.status.charAt(0).toUpperCase() + vuln.status.slice(1).replace('-', ' ')}
                  </Badge>
                </TableCell>
                <TableCell className="text-muted-foreground">{new Date(vuln.discoveredAt).toLocaleDateString()}</TableCell>
              </TableRow>
            ))}
            
            {vulnerabilities.length === 0 && (
              <TableRow>
                <TableCell colSpan={4} className="h-24 text-center">
                  No vulnerabilities found.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </BlurContainer>
  );
};

export default VulnerabilityTable;
