
import React from 'react';
import { cn } from '@/lib/utils';
import BlurContainer from '../ui/BlurContainer';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ExternalLink, ArrowRight } from 'lucide-react';

export type SeverityLevel = 'critical' | 'high' | 'medium' | 'low' | 'info';

export interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: SeverityLevel;
  status: 'open' | 'investigating' | 'fixed' | 'false-positive';
  discoveredAt: string;
  affectedUrls?: string[];
}

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  className?: string;
  compact?: boolean;
}

const severityColors: Record<SeverityLevel, string> = {
  critical: 'bg-severity-critical text-white',
  high: 'bg-severity-high text-white',
  medium: 'bg-severity-medium text-black',
  low: 'bg-severity-low text-black',
  info: 'bg-severity-info text-white',
};

const statusColors: Record<string, string> = {
  open: 'bg-destructive/10 text-destructive border-destructive/20',
  investigating: 'bg-severity-high/10 text-severity-high border-severity-high/20',
  fixed: 'bg-severity-low/10 text-severity-low border-severity-low/20',
  'false-positive': 'bg-muted text-muted-foreground border-muted-foreground/20',
};

const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({
  vulnerability,
  className,
  compact = false,
}) => {
  const { title, description, severity, status, discoveredAt, affectedUrls } = vulnerability;
  
  const date = new Date(discoveredAt);
  const formattedDate = date.toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
  });

  return (
    <BlurContainer className={cn("", className)}>
      <div className="flex items-start justify-between">
        <div className="flex gap-2">
          <Badge variant="outline" className={cn("font-medium", severityColors[severity])}>
            {severity.charAt(0).toUpperCase() + severity.slice(1)}
          </Badge>
          
          <Badge variant="outline" className={cn("font-medium", statusColors[status])}>
            {status.charAt(0).toUpperCase() + status.slice(1).replace('-', ' ')}
          </Badge>
        </div>
        
        <span className="text-xs text-muted-foreground">
          {formattedDate}
        </span>
      </div>
      
      <h3 className="mt-3 text-lg font-medium leading-6">{title}</h3>
      
      {!compact && (
        <>
          <p className="mt-2 text-sm text-muted-foreground line-clamp-2">{description}</p>
          
          {affectedUrls && affectedUrls.length > 0 && (
            <div className="mt-3">
              <h4 className="text-xs font-medium text-muted-foreground mb-1">Affected URLs:</h4>
              <ul className="space-y-1">
                {affectedUrls.slice(0, 2).map((url, index) => (
                  <li key={index} className="text-xs flex items-center">
                    <ExternalLink className="h-3 w-3 mr-1 text-muted-foreground" />
                    <span className="truncate">{url}</span>
                  </li>
                ))}
                {affectedUrls.length > 2 && (
                  <li className="text-xs text-muted-foreground">
                    +{affectedUrls.length - 2} more
                  </li>
                )}
              </ul>
            </div>
          )}
          
          <div className="mt-4 flex justify-end">
            <Button variant="ghost" size="sm" className="text-xs gap-1 items-center">
              View details
              <ArrowRight className="h-3 w-3 ml-1" />
            </Button>
          </div>
        </>
      )}
    </BlurContainer>
  );
};

export default VulnerabilityCard;
